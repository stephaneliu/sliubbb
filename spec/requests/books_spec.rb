require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/books", type: :request do
  let(:invalid_attributes) { skip("Add a hash of attributes invalid for your model") }

  # describe "GET /index" do
  #   it "renders a successful response" do
  #     create :book
  #     get books_url
  #     expect(response).to be_successful
  #   end
  # end
  #
  # describe "GET /show" do
  #   it "renders a successful response" do
  #     book = create :book
  #     get book_url(book)
  #     expect(response).to be_successful
  #   end
  # end
  #
  # describe "GET /new" do
  #   it "renders a successful response" do
  #     get new_book_url
  #     expect(response).to be_successful
  #   end
  # end
  #
  # describe "GET /edit" do
  #   it "render a successful response" do
  #     book = create :book
  #     get edit_book_url(book)
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Book" do
        expect { post books_url, params: { book: { name: "hi", description: "there" } } }.to change(
          Book,
          :count
        ).by(1)
      end

      it "redirects to the created book" do
        post books_url, params: { book: { name: "hi", description: "there" } }
        expect(response).to redirect_to(book_url(Book.last))
      end
    end

    # context "with invalid parameters" do
    #   it "does not create a new Book" do
    #     expect { post books_url, params: { name: "hi", description: "there" } }.to change(
    #       Book,
    #       :count
    #     ).by(0)
    #   end
    # end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     it "updates the requested book" do
  #       book = create(:book)
  #       patch book_url(book), params: { book: attributes_for(:book) }
  #       book.reload
  #       skip("Add assertions for updated state")
  #     end
  #
  #     it "redirects to the book" do
  #       book = create(:book)
  #       patch book_url(book), params: { book: attributes_for(:book) }
  #       book.reload
  #       expect(response).to redirect_to(book_url(book))
  #     end
  #   end
  #
  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       book = create(:book)
  #       patch book_url(book), params: { book: invalid_attributes }
  #       expect(response).to be_successful
  #     end
  #   end
  # end
  #
  # describe "DELETE /destroy" do
  #   it "destroys the requested book" do
  #     book = create(:book)
  #     expect { delete book_url(book) }.to change(Book, :count).by(-1)
  #   end
  #
  #   it "redirects to the books list" do
  #     book = create(:book)
  #     delete book_url(book)
  #     expect(response).to redirect_to(books_url)
  #   end
  # end
end
